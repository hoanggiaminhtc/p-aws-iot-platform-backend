# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

name: CD-Workflows

on:
  push:
    branches: [ "develop" ]

env:
  AWS_REGION: ap-southeast-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: iot_platform_app           # set this to your Amazon ECR repository name
  ECS_SERVICE: iot-platform-backend                 # set this to your Amazon ECS service name
  ECS_CLUSTER: iot-platform-backend                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition/task-definition.json # set this to the path to your Amazon ECS task definition
                                              # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: iot_platform_app           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition


permissions: write-all

jobs:
  # **************************************************
  # -------------------- Run CI----------------------*
  # **************************************************
  run-ci:
    # Run on github Ubuntu Linux VM
    uses: ./.github/workflows/ci.yml


  # **************************************************
  # -------------------- Run CD----------------------*
  # **************************************************
  run-cd:
    # Depend on CI job
    needs: run-ci
    if:
      contains('refs/heads/develop', github.ref)
    name: Deploy
    runs-on: ubuntu-latest
    environment: develop


    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        role-duration-seconds: 1200

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}

      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        touch .env
        echo 'AWS_S3_ACCESS_KEY_ID= "${{ secrets.AWS_S3_ACCESS_KEY_ID }}"' >> .env
        echo 'AWS_S3_SECRET_ACCESS_KEY= "${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}"' >> .env
        echo 'BUCKET_NAME= "${{ secrets.BUCKET_NAME }}"' >> .env
        echo 'CLOUDINARY_API_KEY= "${{ secrets.CLOUDINARY_API_KEY }}"' >> .env
        echo 'CLOUDINARY_API_SECRET= "${{ secrets.CLOUDINARY_API_SECRET }}"' >> .env
        echo 'DB_URI= "${{ secrets.DB_URI }}"' >> .env
        echo 'CLOUDINARY_CLOUD_NAME= "${{ secrets.CLOUDINARY_CLOUD_NAME }}"' >> .env
        echo 'REGION= "ap-southeast-1"' >> .env
        echo 'APP_PORT = 5000' >> .env
        echo 'APP_SECRET = thai123' >> .env
        echo 'APP_EMAIL = ${{ secrets.APP_EMAIL }}' >> .env
        echo 'MQTT_HOST = "${{ secrets.MQTT_HOST }}"' >> .env
        echo 'MQTT_PORT = ${{ secrets.MQTT_PORT }}' >> .env
        echo 'MQTT_PROTOCOL = "mqtts"' >> .env
        echo 'MQTT_USERNAME = "${{ secrets.MQTT_USERNAME }}"' >> .env
        echo 'MQTT_PASSWORD = "${{ secrets.MQTT_PASSWORD }}"' >> .env
        echo 'SENDGRID_API_KEY = ${{ secrets.SENDGRID_API_KEY }}"' >> .env
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:latest"

    - name: Logout from ECR
      if: always()
      run: docker logout ${{steps.login-ecr.outputs.registry}}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
